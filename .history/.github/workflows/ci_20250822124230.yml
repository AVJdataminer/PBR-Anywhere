name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pbr_anywhere_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci && cd ..
        cd backend && npm ci && cd ..
        cd scraper && npm ci && cd ..
        cd recorder && npm ci && cd ..
        cd infrastructure && npm ci && cd ..
    
    - name: Run linting
      run: |
        npm run lint:frontend
        npm run lint:backend
    
    - name: Run tests
      run: |
        npm run test:frontend
        npm run test:backend
      env:
        CI: true
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pbr_anywhere_test
        REDIS_URL: redis://localhost:6379
    
    - name: Build application
      run: |
        npm run build:frontend
        npm run build:backend

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        npm audit --audit-level moderate
        cd frontend && npm audit --audit-level moderate && cd ..
        cd backend && npm audit --audit-level moderate && cd ..
    
    - name: Check for vulnerabilities
      run: |
        npm audit --audit-level moderate --json > audit-results.json || true
        if [ -s audit-results.json ]; then
          echo "Security vulnerabilities found:"
          cat audit-results.json
          exit 1
        fi

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker-compose build
    
    - name: Test Docker images
      run: |
        docker-compose up -d postgres redis
        sleep 10
        docker-compose up --abort-on-container-exit --exit-code-from backend
